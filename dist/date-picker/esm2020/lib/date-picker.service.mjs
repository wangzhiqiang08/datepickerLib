import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
export class DatePickerService {
    constructor() { }
    calculate(year, month, day) {
        let date = year + '/' + month + '/' + '1';
        let whichDay = new Date(date).getDay();
        let message = {
            year: year,
            month: month,
            currentMonthLen: new Date(year, month, 0).getDate(),
            previousMonthLen: new Date(year, (month - 1), 0).getDate(),
            nextMonthLen: new Date(year, (month + 1), 0).getDate(),
            whichDay: whichDay,
            day: day
        };
        return message;
    }
    getTotalMonthList(year, month, day, startWithSundayOrMonday) {
        let dayLists = [];
        let calcResult = this.calculate(year, month, day);
        let startWeekDay = calcResult.whichDay;
        let currentMonthList = this.getMonthList(calcResult.currentMonthLen);
        let previousMonthList = this.getMonthList(calcResult.previousMonthLen);
        let nextMonthList = this.getMonthList(calcResult.nextMonthLen);
        if (startWithSundayOrMonday == 1 || startWithSundayOrMonday == "1") {
            if (startWeekDay == 1) {
                dayLists = [...currentMonthList, ...nextMonthList.slice(0, 42 - currentMonthList.length)];
            }
            else if (startWeekDay == 0) {
                let previousMonthSlice = previousMonthList.slice(-6, previousMonthList.length);
                dayLists = [...previousMonthSlice, ...currentMonthList, ...nextMonthList.slice(0, 42 - currentMonthList.length - previousMonthSlice.length)];
            }
            else {
                let previousMonthSlice = previousMonthList.slice(-startWeekDay + 1, previousMonthList.length);
                dayLists = [...previousMonthSlice, ...currentMonthList, ...nextMonthList.slice(0, 42 - currentMonthList.length - previousMonthSlice.length)];
            }
            return dayLists;
        }
        else if (startWithSundayOrMonday == 0 || startWithSundayOrMonday == "0") {
            if (startWeekDay == 0) {
                dayLists = [...currentMonthList, ...nextMonthList.slice(0, 42 - currentMonthList.length)];
            }
            else {
                let previousMonthSlice = previousMonthList.slice(-startWeekDay, previousMonthList.length);
                dayLists = [...previousMonthSlice, ...currentMonthList, ...nextMonthList.slice(0, 42 - currentMonthList.length - previousMonthSlice.length)];
            }
            return dayLists;
        }
        else {
            throw new SyntaxError("The key of 'startWithSundayOrMonday' 's value must be 0 or 1. ");
        }
    }
    getMonthList(monthLength) {
        let list = [];
        for (let i = 1; i <= monthLength; i++) {
            list.push(i);
        }
        return list;
    }
    setEveryDateStatus(year, month, day, selectedDate, startWithSundayOrMonday) {
        let totalDates = this.getTotalMonthList(year, month, day, startWithSundayOrMonday);
        let now = new Date();
        let currentDate = now.getDate();
        let currentMonth = now.getMonth() + 1;
        let currentYear = now.getFullYear();
        let selected = selectedDate && selectedDate.split("/");
        if (!selectedDate) {
            totalDates = totalDates.map((date) => {
                let isToday = (date === currentDate) && (month === currentMonth) && (year === currentYear);
                return { date: date, isToday: isToday, isSelected: false, isCurrentMonth: null };
            });
            totalDates = this.filterAndSetCurrentMonthDate(totalDates);
        }
        else {
            totalDates = totalDates.map((date, index) => {
                let isToday = (date === currentDate) && (month === currentMonth) && (year === currentYear);
                let isSelected = (date === Number(selected[0])) && (month === Number(selected[1])) && (year === Number(selected[2])) && this.isCurrentMonthDate(totalDates, index + 1);
                return { date: date, isToday: isToday, isSelected: isSelected, isCurrentMonth: null };
            });
            totalDates = this.filterAndSetCurrentMonthDate(totalDates);
        }
        return totalDates;
    }
    filterAndSetCurrentMonthDate(totalDates) {
        let currentMonthStart, currentMonthEnd, includes = [];
        totalDates.forEach((el, i) => (el.date === 1 || el.date === "1") && includes.push(i));
        if (includes.length > 0) {
            currentMonthStart = includes[0];
            currentMonthEnd = includes[1];
            totalDates.map((date, index) => {
                if (index >= currentMonthStart && index < currentMonthEnd) {
                    date.isCurrentMonth = true;
                }
                else {
                    date.isCurrentMonth = false;
                }
            });
            return totalDates;
        }
        else {
            return totalDates;
        }
    }
    isCurrentMonthDate(totalDates, index) {
        let currentMonthStart, currentMonthEnd, includes = [];
        totalDates.forEach((el, i) => (el === 1 || el === "1") && includes.push(i));
        currentMonthStart = includes[0];
        currentMonthEnd = includes[1];
        return index >= currentMonthStart && index < currentMonthEnd;
    }
    getYearList(currentYear) {
        let year = currentYear;
        let endNumber = year.toString().trim().slice(-1);
        let list = [];
        if (endNumber == '0') {
            for (let i = currentYear; i < (currentYear + 10); i++) {
                list.push(Number(i));
            }
        }
        else {
            for (let i = 0; i < 10; i++) {
                currentYear--;
                if (currentYear % 10 == 0) {
                    break;
                }
            }
            for (let i = currentYear; i < (currentYear + 10); i++) {
                list.push(Number(i));
            }
        }
        return list;
    }
}
DatePickerService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.10", ngImport: i0, type: DatePickerService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
DatePickerService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "13.3.10", ngImport: i0, type: DatePickerService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.10", ngImport: i0, type: DatePickerService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return []; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0ZS1waWNrZXIuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3Byb2plY3RzL2RhdGUtcGlja2VyL3NyYy9saWIvZGF0ZS1waWNrZXIuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDOztBQUszQyxNQUFNLE9BQU8saUJBQWlCO0lBRTVCLGdCQUFnQixDQUFDO0lBRWpCLFNBQVMsQ0FBQyxJQUFZLEVBQUMsS0FBYSxFQUFDLEdBQVc7UUFDOUMsSUFBSSxJQUFJLEdBQUMsSUFBSSxHQUFDLEdBQUcsR0FBQyxLQUFLLEdBQUMsR0FBRyxHQUFDLEdBQUcsQ0FBQztRQUNoQyxJQUFJLFFBQVEsR0FBQyxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQztRQUNyQyxJQUFJLE9BQU8sR0FBQztZQUNOLElBQUksRUFBRSxJQUFJO1lBQ1YsS0FBSyxFQUFFLEtBQUs7WUFDWixlQUFlLEVBQUUsSUFBSSxJQUFJLENBQUMsSUFBSSxFQUFDLEtBQUssRUFBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLEVBQUU7WUFDakQsZ0JBQWdCLEVBQUUsSUFBSSxJQUFJLENBQUMsSUFBSSxFQUFDLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sRUFBRTtZQUN4RCxZQUFZLEVBQUUsSUFBSSxJQUFJLENBQUMsSUFBSSxFQUFDLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sRUFBRTtZQUNwRCxRQUFRLEVBQUUsUUFBUTtZQUNsQixHQUFHLEVBQUUsR0FBRztTQUNiLENBQUM7UUFDRixPQUFPLE9BQU8sQ0FBQztJQUNqQixDQUFDO0lBRUQsaUJBQWlCLENBQUMsSUFBWSxFQUFDLEtBQWEsRUFBQyxHQUFXLEVBQUUsdUJBQXdDO1FBQ2hHLElBQUks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akQsSUFBSSxJQUFJLEdBQVEsRUFBRSxDQUFDO1FBQ25CLElBQUksU0FBUyxJQUFJLEdBQUcsRUFBRTtZQUNwQixLQUFLLElBQUksQ0FBQyxHQUFHLFdBQVcsRUFBRSxDQUFDLEdBQUcsQ0FBQyxXQUFXLEdBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUU7Z0JBQ25ELElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7YUFDdEI7U0FDRjthQUFNO1lBQ0wsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDLEVBQUUsRUFBRTtnQkFDM0IsV0FBVyxFQUFHLENBQUM7Z0JBQ2YsSUFBSSxXQUFXLEdBQUcsRUFBRSxJQUFJLENBQUMsRUFBQztvQkFDeEIsTUFBTTtpQkFDUDthQUNGO1lBQ0QsS0FBSyxJQUFJLENBQUMsR0FBRyxXQUFXLEVBQUUsQ0FBQyxHQUFHLENBQUMsV0FBVyxHQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFO2dCQUNuRCxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO2FBQ3RCO1NBQ0Y7UUFDRCxPQUFPLElBQUksQ0FBQztJQUVkLENBQUM7OytHQW5JVSxpQkFBaUI7bUhBQWpCLGlCQUFpQixjQUZoQixNQUFNOzRGQUVQLGlCQUFpQjtrQkFIN0IsVUFBVTttQkFBQztvQkFDVixVQUFVLEVBQUUsTUFBTTtpQkFDbkIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnXG59KVxuZXhwb3J0IGNsYXNzIERhdGVQaWNrZXJTZXJ2aWNlIHtcblxuICBjb25zdHJ1Y3RvcigpIHsgfVxuXG4gIGNhbGN1bGF0ZSh5ZWFyOiBudW1iZXIsbW9udGg6IG51bWJlcixkYXk6IG51bWJlcik6IGFueSB7XG4gICAgbGV0IGRhdGU9eWVhcisnLycrbW9udGgrJy8nKycxJztcbiAgICBsZXQgd2hpY2hEYXk9bmV3IERhdGUoZGF0ZSkuZ2V0RGF5KCk7XG4gICAgbGV0IG1lc3NhZ2U9e1xuICAgICAgICAgIHllYXI6IHllYXIsXG4gICAgICAgICAgbW9udGg6IG1vbnRoLFxuICAgICAgICAgIGN1cnJlbnRNb250aExlbjogbmV3IERhdGUoeWVhcixtb250aCwwKS5nZXREYXRlKCksXG4gICAgICAgICAgcHJldmlvdXNNb250aExlbjogbmV3IERhdGUoeWVhciwobW9udGggLSAxKSwwKS5nZXREYXRlKCksXG4gICAgICAgICAgbmV4dE1vbnRoTGVuOiBuZXcgRGF0ZSh5ZWFyLChtb250aCArIDEpLDApLmdldERhdGUoKSxcbiAgICAgICAgICB3aGljaERheTogd2hpY2hEYXksXG4gICAgICAgICAgZGF5OiBkYXlcbiAgICB9O1xuICAgIHJldHVybiBtZXNzYWdlO1xuICB9XG5cbiAgZ2V0VG90YWxNb250aExpc3QoeWVhcjogbnVtYmVyLG1vbnRoOiBudW1iZXIsZGF5OiBudW1iZXIsIHN0YXJ0V2l0aFN1bmRheU9yTW9uZGF5OiBzdHJpbmcgfCBudW1iZXIpOiBBcnJheTxhbnk+IHtcbiAgICBsZXQgZGF5TGlzdHM6YW55ID0gW107XG4gICAgbGV0IGNhbGNSZXN1bHQgPSB0aGlzLmNhbGN1bGF0ZSh5ZWFyLCBtb250aCwgZGF5KTtcbiAgICBsZXQgc3RhcnRXZWVrRGF5ID0gY2FsY1Jlc3VsdC53aGljaERheTtcbiAgICBsZXQgY3VycmVudE1vbnRoTGlzdCA9IHRoaXMuZ2V0TW9udGhMaXN0KGNhbGNSZXN1bHQuY3VycmVudE1vbnRoTGVuKTtcbiAgICBsZXQgcHJldmlvdXNNb250aExpc3QgPSB0aGlzLmdldE1vbnRoTGlzdChjYWxjUmVzdWx0LnByZXZpb3VzTW9udGhMZW4pO1xuICAgIGxldCBuZXh0TW9udGhMaXN0ID0gdGhpcy5nZXRNb250aExpc3QoY2FsY1Jlc3VsdC5uZXh0TW9udGhMZW4pO1xuXG4gICAgaWYgKHN0YXJ0V2l0aFN1bmRheU9yTW9uZGF5ID09IDEgfHwgc3RhcnRXaXRoU3VuZGF5T3JNb25kYXkgPT0gXCIxXCIpIHtcbiAgICAgIGlmKHN0YXJ0V2Vla0RheSA9PSAxKSB7XG4gICAgICAgIGRheUxpc3RzID0gWy4uLmN1cnJlbnRNb250aExpc3QsIC4uLm5leHRNb250aExpc3Quc2xpY2UoMCwgNDIgLSBjdXJyZW50TW9udGhMaXN0Lmxlbmd0aCldO1xuICAgICAgfSBlbHNlIGlmIChzdGFydFdlZWtEYXkgPT0gMCkge1xuICAgICAgICBsZXQgcHJldmlvdXNNb250aFNsaWNlID0gcHJldmlvdXNNb250aExpc3Quc2xpY2UoLTYsIHByZXZpb3VzTW9udGhMaXN0Lmxlbmd0aCk7XG4gICAgICAgIGRheUxpc3RzID0gIFsuLi5wcmV2aW91c01vbnRoU2xpY2UsIC4uLmN1cnJlbnRNb250aExpc3QsIC4uLm5leHRNb250aExpc3Quc2xpY2UoMCwgNDIgLSBjdXJyZW50TW9udGhMaXN0Lmxlbmd0aCAtIHByZXZpb3VzTW9udGhTbGljZS5sZW5ndGgpXTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGxldCBwcmV2aW91c01vbnRoU2xpY2UgPSBwcmV2aW91c01vbnRoTGlzdC5zbGljZSgtc3RhcnRXZWVrRGF5KzEsIHByZXZpb3VzTW9udGhMaXN0Lmxlbmd0aCk7XG4gICAgICAgIGRheUxpc3RzID0gIFsuLi5wcmV2aW91c01vbnRoU2xpY2UsIC4uLmN1cnJlbnRNb250aExpc3QsIC4uLm5leHRNb250aExpc3Quc2xpY2UoMCwgNDIgLSBjdXJyZW50TW9udGhMaXN0Lmxlbmd0aCAtIHByZXZpb3VzTW9udGhTbGljZS5sZW5ndGgpXTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBkYXlMaXN0cztcbiAgICB9IGVsc2UgaWYgKHN0YXJ0V2l0aFN1bmRheU9yTW9uZGF5ID09IDAgfHwgc3RhcnRXaXRoU3VuZGF5T3JNb25kYXkgPT0gXCIwXCIpIHtcbiAgICAgIGlmKHN0YXJ0V2Vla0RheSA9PSAwKSB7XG4gICAgICAgIGRheUxpc3RzID0gWy4uLmN1cnJlbnRNb250aExpc3QsIC4uLm5leHRNb250aExpc3Quc2xpY2UoMCwgNDIgLSBjdXJyZW50TW9udGhMaXN0Lmxlbmd0aCldO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbGV0IHByZXZpb3VzTW9udGhTbGljZSA9IHByZXZpb3VzTW9udGhMaXN0LnNsaWNlKC1zdGFydFdlZWtEYXksIHByZXZpb3VzTW9udGhMaXN0Lmxlbmd0aCk7XG4gICAgICAgIGRheUxpc3RzID0gIFsuLi5wcmV2aW91c01vbnRoU2xpY2UsIC4uLmN1cnJlbnRNb250aExpc3QsIC4uLm5leHRNb250aExpc3Quc2xpY2UoMCwgNDIgLSBjdXJyZW50TW9udGhMaXN0Lmxlbmd0aCAtIHByZXZpb3VzTW9udGhTbGljZS5sZW5ndGgpXTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBkYXlMaXN0cztcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IFN5bnRheEVycm9yKFwiVGhlIGtleSBvZiAnc3RhcnRXaXRoU3VuZGF5T3JNb25kYXknICdzIHZhbHVlIG11c3QgYmUgMCBvciAxLiBcIik7XG4gICAgfVxuICB9XG5cbiAgZ2V0TW9udGhMaXN0KG1vbnRoTGVuZ3RoOiBudW1iZXIpOiBBcnJheTxhbnk+IHtcbiAgICBsZXQgbGlzdD1bXTtcbiAgICBmb3IobGV0IGkgPSAxOyBpIDw9IG1vbnRoTGVuZ3RoOyBpKyspIHtcbiAgICAgIGxpc3QucHVzaChpKTtcbiAgICB9XG4gICAgcmV0dXJuIGxpc3Q7XG4gIH1cblxuICBzZXRFdmVyeURhdGVTdGF0dXMoeWVhcjogbnVtYmVyLG1vbnRoOiBudW1iZXIsZGF5OiBudW1iZXIsIHNlbGVjdGVkRGF0ZTogc3RyaW5nIHwgbnVsbCwgc3RhcnRXaXRoU3VuZGF5T3JNb25kYXk6IHN0cmluZyB8IG51bWJlcik6IEFycmF5PG51bWJlcj4ge1xuICAgIGxldCB0b3RhbERhdGVzOiBhbnkgPSB0aGlzLmdldFRvdGFsTW9udGhMaXN0KHllYXIsIG1vbnRoLCBkYXksIHN0YXJ0V2l0aFN1bmRheU9yTW9uZGF5KTtcbiAgICBsZXQgbm93ID0gbmV3IERhdGUoKTtcbiAgICBsZXQgY3VycmVudERhdGUgPSBub3cuZ2V0RGF0ZSgpO1xuICAgIGxldCBjdXJyZW50TW9udGggPSBub3cuZ2V0TW9udGgoKSArIDE7XG4gICAgbGV0IGN1cnJlbnRZZWFyID0gbm93LmdldEZ1bGxZZWFyKClcbiAgICBsZXQgc2VsZWN0ZWQ6IGFueSA9IHNlbGVjdGVkRGF0ZSAmJiBzZWxlY3RlZERhdGUuc3BsaXQoXCIvXCIpO1xuICAgIGlmICghc2VsZWN0ZWREYXRlKSB7XG4gICAgICB0b3RhbERhdGVzID0gdG90YWxEYXRlcy5tYXAoKGRhdGU6IGFueSkgPT4ge1xuICAgICAgICBsZXQgaXNUb2RheSA9IChkYXRlID09PSBjdXJyZW50RGF0ZSkgJiYgKG1vbnRoID09PSBjdXJyZW50TW9udGgpICYmICh5ZWFyID09PSBjdXJyZW50WWVhcik7XG4gICAgICAgIHJldHVybiB7ZGF0ZTogZGF0ZSwgaXNUb2RheTogaXNUb2RheSwgaXNTZWxlY3RlZDogZmFsc2UsIGlzQ3VycmVudE1vbnRoOiBudWxsfVxuICAgICAgfSlcbiAgICAgIHRvdGFsRGF0ZXMgPSB0aGlzLmZpbHRlckFuZFNldEN1cnJlbnRNb250aERhdGUodG90YWxEYXRlcyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRvdGFsRGF0ZXMgPSB0b3RhbERhdGVzLm1hcCgoZGF0ZTogYW55LCBpbmRleDogYW55KSA9PiB7XG4gICAgICAgIGxldCBpc1RvZGF5ID0gKGRhdGUgPT09IGN1cnJlbnREYXRlKSAmJiAobW9udGggPT09IGN1cnJlbnRNb250aCkgJiYgKHllYXIgPT09IGN1cnJlbnRZZWFyKTtcbiAgICAgICAgbGV0IGlzU2VsZWN0ZWQgPSAoZGF0ZSA9PT0gTnVtYmVyKHNlbGVjdGVkWzBdKSkgJiYgKG1vbnRoID09PSBOdW1iZXIoc2VsZWN0ZWRbMV0pKSAmJiAoeWVhciA9PT0gTnVtYmVyKHNlbGVjdGVkWzJdKSkgJiYgdGhpcy5pc0N1cnJlbnRNb250aERhdGUodG90YWxEYXRlcywgaW5kZXgrMSk7XG4gICAgICAgIHJldHVybiB7ZGF0ZTogZGF0ZSwgaXNUb2RheTogaXNUb2RheSwgaXNTZWxlY3RlZDogaXNTZWxlY3RlZCwgaXNDdXJyZW50TW9udGg6IG51bGx9XG4gICAgICB9KVxuICAgICAgdG90YWxEYXRlcyA9IHRoaXMuZmlsdGVyQW5kU2V0Q3VycmVudE1vbnRoRGF0ZSh0b3RhbERhdGVzKTtcbiAgICB9XG4gICAgcmV0dXJuIHRvdGFsRGF0ZXM7XG4gIH1cblxuICBmaWx0ZXJBbmRTZXRDdXJyZW50TW9udGhEYXRlKHRvdGFsRGF0ZXM6IEFycmF5PG51bWJlcj4pIHtcbiAgICBsZXQgY3VycmVudE1vbnRoU3RhcnQ6IG51bWJlciwgY3VycmVudE1vbnRoRW5kOiBudW1iZXIsIGluY2x1ZGVzOiBhbnlbXSA9IFtdO1xuICAgIHRvdGFsRGF0ZXMuZm9yRWFjaCgoZWw6YW55LCBpOiBhbnkpID0+IChlbC5kYXRlID09PSAxIHx8IGVsLmRhdGUgPT09IFwiMVwiKSAmJiBpbmNsdWRlcy5wdXNoKGkpKTtcbiAgICBpZiAoaW5jbHVkZXMubGVuZ3RoID4gMCkge1xuICAgICAgY3VycmVudE1vbnRoU3RhcnQgPSBpbmNsdWRlc1swXTtcbiAgICAgIGN1cnJlbnRNb250aEVuZCA9IGluY2x1ZGVzWzFdO1xuICAgICAgdG90YWxEYXRlcy5tYXAoKGRhdGU6IGFueSwgaW5kZXgpID0+IHtcbiAgICAgICAgaWYgKGluZGV4ID49IGN1cnJlbnRNb250aFN0YXJ0ICYmIGluZGV4IDwgY3VycmVudE1vbnRoRW5kKSB7XG4gICAgICAgICAgZGF0ZS5pc0N1cnJlbnRNb250aCA9IHRydWU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZGF0ZS5pc0N1cnJlbnRNb250aCA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9KVxuICAgICAgcmV0dXJuIHRvdGFsRGF0ZXM7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB0b3RhbERhdGVzO1xuICAgIH1cbiAgfVxuICBcbiAgaXNDdXJyZW50TW9udGhEYXRlKHRvdGFsRGF0ZXM6IEFycmF5PG51bWJlcj4sIGluZGV4OiBudW1iZXIpIHtcbiAgICBsZXQgY3VycmVudE1vbnRoU3RhcnQ6IG51bWJlciwgY3VycmVudE1vbnRoRW5kOiBudW1iZXIsIGluY2x1ZGVzOiBhbnlbXSA9IFtdO1xuICAgIHRvdGFsRGF0ZXMuZm9yRWFjaCgoZWw6YW55LCBpOiBhbnkpID0+IChlbCA9PT0gMSB8fCBlbCA9PT0gXCIxXCIpICYmIGluY2x1ZGVzLnB1c2goaSkpO1xuICAgIGN1cnJlbnRNb250aFN0YXJ0ID0gaW5jbHVkZXNbMF07XG4gICAgY3VycmVudE1vbnRoRW5kID0gaW5jbHVkZXNbMV07XG4gICAgcmV0dXJuIGluZGV4ID49IGN1cnJlbnRNb250aFN0YXJ0ICYmIGluZGV4IDwgY3VycmVudE1vbnRoRW5kO1xuICB9XG5cbiAgZ2V0WWVhckxpc3QoY3VycmVudFllYXI6IG51bWJlcikge1xuICAgIGxldCB5ZWFyID0gY3VycmVudFllYXI7XG4gICAgbGV0IGVuZE51bWJlciA9IHllYXIudG9TdHJpbmcoKS50cmltKCkuc2xpY2UoLTEpO1xuICAgIGxldCBsaXN0OiBhbnkgPSBbXTtcbiAgICBpZiAoZW5kTnVtYmVyID09ICcwJykge1xuICAgICAgZm9yIChsZXQgaSA9IGN1cnJlbnRZZWFyOyBpIDwgKGN1cnJlbnRZZWFyKzEwKTsgaSsrKSB7XG4gICAgICAgIGxpc3QucHVzaChOdW1iZXIoaSkpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IDEwOyBpKyspIHtcbiAgICAgICAgY3VycmVudFllYXIgLS07XG4gICAgICAgIGlmIChjdXJyZW50WWVhciAlIDEwID09IDApe1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBmb3IgKGxldCBpID0gY3VycmVudFllYXI7IGkgPCAoY3VycmVudFllYXIrMTApOyBpKyspIHtcbiAgICAgICAgbGlzdC5wdXNoKE51bWJlcihpKSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBsaXN0O1xuICAgIFxuICB9XG59XG4iXX0=
import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
export class DatePickerService {
    constructor() { }
    calculate(year, month, day) {
        let date = year + '/' + month + '/' + '1';
        console.log(date);
        let whichDay = new Date(date).getDay();
        let message = {
            year: year,
            month: month,
            currentMonthLen: new Date(year, month, 0).getDate(),
            previousMonthLen: new Date(year, (month - 1), 0).getDate(),
            nextMonthLen: new Date(year, (month + 1), 0).getDate(),
            whichDay: whichDay,
            day: day
        };
        return message;
    }
    getTotalMonthList(year, month, day) {
        let dayLists = [];
        let calcResult = this.calculate(year, month, day);
        let startWeekDay = calcResult.whichDay;
        let currentMonthList = this.getMonthList(calcResult.currentMonthLen);
        let previousMonthList = this.getMonthList(calcResult.previousMonthLen);
        let nextMonthList = this.getMonthList(calcResult.nextMonthLen);
        if (startWeekDay == 0) {
            dayLists = [...currentMonthList, ...nextMonthList.slice(0, 42 - currentMonthList.length)];
        }
        else {
            let previousMonthSlice = previousMonthList.slice(-startWeekDay, previousMonthList.length);
            dayLists = [...previousMonthSlice, ...currentMonthList, ...nextMonthList.slice(0, 42 - currentMonthList.length - previousMonthSlice.length)];
        }
        return dayLists;
    }
    getMonthList(monthLength) {
        let list = [];
        for (let i = 1; i <= monthLength; i++) {
            list.push(i);
        }
        return list;
    }
    setEveryDateStatus(year, month, day, selectedDate) {
        let totalDates = this.getTotalMonthList(year, month, day);
        let now = new Date();
        let currentDate = now.getDate();
        let currentMonth = now.getMonth() + 1;
        let currentYear = now.getFullYear();
        let selected = selectedDate && selectedDate.split("/");
        if (!selectedDate) {
            totalDates = totalDates.map((date) => {
                let isToday = (date === currentDate) && (month === currentMonth) && (year === currentYear);
                return { date: date, isToday: isToday, isSelected: false, isCurrentMonth: null };
            });
            totalDates = this.filterAndSetCurrentMonthDate(totalDates);
        }
        else {
            totalDates = totalDates.map((date, index) => {
                let isToday = (date === currentDate) && (month === currentMonth) && (year === currentYear);
                let isSelected = (date === Number(selected[0])) && (month === Number(selected[1])) && (year === Number(selected[2])) && this.isCurrentMontDate(totalDates, index + 1);
                return { date: date, isToday: isToday, isSelected: isSelected, isCurrentMonth: null };
            });
            totalDates = this.filterAndSetCurrentMonthDate(totalDates);
        }
        return totalDates;
    }
    filterAndSetCurrentMonthDate(totalDates) {
        let currentMonthStart, currentMonthEnd, includes = [];
        totalDates.forEach((el, i) => (el.date === 1 || el.date === "1") && includes.push(i));
        if (includes.length > 0) {
            currentMonthStart = includes[0];
            currentMonthEnd = includes[1];
            totalDates.map((date, index) => {
                if (index >= currentMonthStart && index < currentMonthEnd) {
                    date.isCurrentMonth = true;
                }
                else {
                    date.isCurrentMonth = false;
                }
            });
            return totalDates;
        }
        else {
            return totalDates;
        }
    }
    isCurrentMontDate(totalDates, index) {
        let currentMonthStart, currentMonthEnd, includes = [];
        totalDates.forEach((el, i) => (el === 1 || el === "1") && includes.push(i));
        currentMonthStart = includes[0];
        currentMonthEnd = includes[1];
        return index >= currentMonthStart && index < currentMonthEnd;
    }
    getYearList(currentYear) {
        let year = currentYear;
        let endNumber = year.toString().trim().slice(-1);
        let list = [];
        if (endNumber == '0') {
            for (let i = currentYear; i < (currentYear + 10); i++) {
                list.push(Number(i));
            }
        }
        else {
            for (let i = 0; i < 10; i++) {
                currentYear--;
                if (currentYear % 10 == 0) {
                    break;
                }
            }
            for (let i = currentYear; i < (currentYear + 10); i++) {
                list.push(Number(i));
            }
        }
        console.log(list);
        return list;
    }
}
DatePickerService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.9", ngImport: i0, type: DatePickerService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
DatePickerService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "13.3.9", ngImport: i0, type: DatePickerService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.9", ngImport: i0, type: DatePickerService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return []; } });
//# sourceMappingURL=data:application/json;base64,